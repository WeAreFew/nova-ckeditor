<?php

namespace App\Http\Controllers\CKEditor;

use App\Http\Controllers\Controller;
use App\Models\Comment;
use Exception;
use Illuminate\Http\Request;

class CommentController extends Controller
{
    public function add(Request $request)
    {
        $validated = $request->validate([
            'resource_id' => 'required',
            'thread_id' => 'required',
            'content' => 'required',
        ]);

        $newComment = new Comment();

        $newComment->thread_id = $validated['thread_id'];
        $newComment->resource_id = $validated['resource_id'];
        $newComment->resource = $validated['resource'] ?? '';
        $newComment->content = $validated['content'];

        try {
            $newComment->save();
        } catch (Exception $e) {
            return response()->json([
                'error' => $e->getMessage(),
            ], 400);
        }

        return response()->json([
            'success' => true,
        ], 201);
    }

    public function remove(int $commentId, int $threadId, Request $request)
    {
        $commentRow = Comment::where('id', $commentId)
            ->where('thread_id', $threadId)
            ->first();

        try {
            $commentRow->delete();
        } catch (Exception $e) {
            return response()->json([
                'error' => $e->getMessage(),
            ], 400);
        }

        return response()->json([
            'success' => true,
        ], 200);
    }

    public function update(int $commentId, int $threadId, Request $request)
    {
        $commentRow = Comment::where('id', $commentId)
            ->where('thread_id', $threadId)
            ->first();

        $commentRow->content = $request->get('content');

        try {
            $commentRow->save();
        } catch (Exception $e) {
            return response()->json([
                'error' => $e->getMessage(),
            ], 400);
        }

        return response()->json([
            'success' => true,
        ], 200);
    }

    public function getThread(int $threadId)
    {
        return Comment::where('thread_id', $threadId)->first();
    }

    public function getComment(int $commentId, int $threadId)
    {
        return Comment::where('id', $commentId)
            ->where('thread_id', $threadId)
            ->first();
    }
}